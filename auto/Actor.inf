active
This definition is needed for the TopicGroup implementation, and should not normally be overridden in user game code. It allows TopicEntries and TopicGroups to determine their own active status by reference to that of their immediate location.

activeKeys
If this list is not empty then the choice of topic entries to match will be restricted to those whose convKeys property includes at least one of the key values in this list.

actorInformOverheard
Should other actors who can notionally hear the PC talking to us overhear when information is imparted to us when our current ActorState is nil? By default they should.

actorStaysPutMsg
The message to display when this actor doesn't go anywhere when the player character tries to follow this actor.

allowAttack
By default we'll respond to ATTACK ACTOR with the shouldNotAttackMsg; to enable responses to ATTACK via HitTopics (or some other custom handling in the action stage) set allowAttack to true. Leave allowAttack at nil for actors the player character will never want to attack (because their friendly or harmless, for instance) and for which the refusal to attack message will never vary. Override allowAttack to true for actor the player character may want to attack under some circumstances, or where the response to ATTACKing this actor might vary.

allowKiss
By default we'll respond to KISS ACTOR with the shouldNotKissMsg; to enable responses to KISS via KissTopics (or some other custom handling in the action stage) set allowKiss to true.

allStates
A list of all the ActorStates associated with this Actor; this is populated by the preinitialization of the individual ActorStates.

attentionSpan
The maximum value that our boredomCount can reach before we terminate a conversation through 'boredom', because we've given up waiting for the player character to say anything. A value of nil (the default) meanns that we never terminate a conversation for this reason.

boredomAgendaItem
our special "boredom" agenda item - this makes us initiate an end to an active conversation when the PC has ignored us for a given number of consecutive turns

boredomCount
The count of how many turns have passed during which no conversation has actually taken place when we're the player charater's current interlocutor. This can be used to terminate the conversation through 'boredom' if the boredomCount exceeds our attention span.

cannotTakeMsg
The message to display when someone tries to take this actor.

canTalkToMe
In general we can talk to actors

cantFollowFromHereMsg
no description available

canThrowToMe
Unlike inaminate objects, actors can be the logical target of a ThrowTo action

cantStartFromHereMsg
no description available

contentsListed
We don't normally list the contents of an Actor when Looking or Examining.

contType
The (portable) contents of an actor are regarded as being carried.

conversedLastTurn
Did this actor converse with the player character on the previous turn? He/she/it did so if our last conversation time is one less than the game's current turn count.

conversedThisTurn
Has this actor conversed with the player character on the current turn? He/she/it has done so if our last conversation time is the same as the game's turn count.

convKeyTab
A Lookup Table holding conversation keys. Entries in this list take the form tag -> list of TopicEntries that match this tag (e.g. the key is a convKey tag, expressed as a single-quoted string, and the value is a list containing TopicEntries whose convKeys property contains that tag).

curState
Our current ActorState. This should normally be treated as a read-only property; to change the current ActorState of an actor call the setState() method.

dontKnowWhereGoneMsg
no description available

fDaemon
Store the id of the daemon being used to make us follow the player char. We can check whether this actor is currently following or not by testing whether or not this is nil.

followActorMsg
Otherwise, let the connector handle it.

followAgendaItem
Our currently executing FollowAgendaItem, if we have one.

followFuseID
A note of our current following fuse, if we have one; this is used by FollowAgendaItem to check whether the player character is ready to follow us.

informedNameTab
Our look up table for things we've been informed about

informOverheard
Should other actors who can notionally hear the PC talking to us overhear when information is imparted to us? I.e. should their setInform() methods be called too? If we have a curState we use its setting, otherwise we use the value of actorInformOverheard.

isAttackable
By default it's normally possible to attack an actor, even if we don't want to allow it. Game code might want to override this to nil for actors it's obviously futile to try attacking, such as ghosts, gods and giants.

isFixed
By default actors can't be picked up and carried around by other actors (though game authors can override this if they need to create a portable actor).

isHim
no description available

isIt
The object's grammatical gender(s). This information is used to determine which pronouns can match the object as an antecedent, which pronouns should represent it in output, and (for some languages) which articles and other gender-agreement words should be used in conjunction with the object name in output. 

keepPendingKeys
If keepPendingKeys is set to true (normally by a <.convstay> tag) then retain the pending conversation keys (and hence the active ones) for the next conversational turn.

keysManaged
Flag; has the active/pending key management already been carried out on this turn?

kissResponseMsg
The default response of the actor to an attempt to kiss him/her/it where this is not handled anywhere else, but allowKiss is true.

lastConvTime
The last turn on which this actor conversed with the player character. We start out with a value of -1 to mean that we haven't conversed at all.

lastTravelInfo
If the player character has seen this actor travel then lastTravelInfo contains a two-element list comprising the room the actor was seen travelling from and the connector by which the actor was seen travelling.

massNoun
The object's name is a mass noun. A mass noun is a word that has singular form but represents an indeterminate quantity or group of something, such as "sand" or "furniture". 

noResponseMsg
The default response of the actor to a conversational command that is not handled anywhere else.

ownsContents
An actor generally owns its contents

pcConnector
The Travel Connector just traversed by the player character

pendingAgendaList
A list of agenda items to be added to our agenda at some later point. The main purpose is to allow game code to set up a list of AgendaItems (typically ConvAgendaItems) that become part of the actor's current agenda when conversation is initiated via a HelloTopic.

pendingKeys
a list of the keys to be copied into the activeKeys property for use in the next conversational turn. These are normally added by game code via <.convnode> tags and the like in conversational output.

refuseCommandMsg
The default message to use in response to a command directed to this actor that is not handled in any other way.

shouldNotAttackMsg
The message to display if allowAttack is nil

shouldNotKissMsg
The message to display if allowKiss is nil

specialDescBeforeContents
We normally list any actors after the miscellaneous contents of a room

stateDesc
Our state-specific description, which is appended to our desc to give our full description. By default we simply take this from our current ActorState.

suggestionKey
If this is non-nil then a TOPICS command will use it to restrict the topics suggested to those with this key in their convKeys property. This could be used, for example, to provide a top-level 'menu' of topics when the full list would otherwise be overwhelming.

waitToSeeMsg
no description available


activatePendingAgenda ( )
Make our pending agenda items acting by moving them all from our pendingAgendaList to all our actual agenda lists (on the actor and on all our DefaultAgendaItems).

actorAfterAction ( )
Give this actor a chance to respond just after an action prior to any response from its current actor state. By default we do nothing, but game code can easily override this without any risk of breaking the state-dependent afterAction mechanism.

actorAfterTravel (traveler, connector)
Give this actor a chance to react just after another actor travels in addition to any reaction from its current actor state. By default we do nothing, but game code can easily override this without any risk of breaking the state-dependent afterTravel mechanism.

actorArrivingTurn ( )
This method is executed when this actor has just followed the player character to a new location and there is no current ActorState. By default we do nothing.

actorBeforeAction ( )
Give this actor a chance to respond just before an action prior to any response from its current actor state. By default we do nothing, but game code can easily override this without any risk of breaking the state-dependent beforeAction mechanism.

actorBeforeTravel (traveler, connector)
Give this actor a chance to react just before another actor travels in addition to any reaction from its current actor state. By default we do nothing, but game code can easily override this without any risk of breaking the state-dependent beforeTravel mechanism.

actorCanEndConversation (reason)
A state-independent check on whether this actor will allow the current conversation to end on account of reason. By default we simply return true to allow the conversation to end, but game code can override this to return nil to disallow the ending of the conversation (presumably under specific conditions).

actorRemoteSpecialDesc (pov)
The remoteSpecialDesc to use if we don't have a current ActorState (i.e. if curState is nil). By default we say the actor is in the remote location.

actorSay (str)
This method can be called on the actor when we want to display the text of one or both sides of a conversational exchange with the actor without going through the TopicEntry mechanism to do so.

actorSayHello ( )
Have the actor greet the player character on the actor's initiative

actorSpecialDesc ( )
The specialDesc to use if we don't have a current ActorState By default we just display a message saying the actor is here or that the actor is in a nested room.

addPendingKey (val)
Add a convkey value to our pending keys list (for use as an active key

addToAllAgendas ([lst])
Add an agenda item both to myself and to any DefaultAgendaTopics either directly in me or in any of my Actor States

addToBothAgendas ([lst])
Add an agenda item to both myself and any DefaultAgendaTopic directly within me.

addToCurAgendas ([lst])
Add an agenda item to myself and to any DefaultAgendaTopios directly in me or in my current ActorState.

addToPendingAgenda ([lst])
Add an item to our pending agenda list

afterAction ( )
Notification that an action has just been carried out in our presence

afterTravel (traveler, connector)
Notification that travel has just taken place in our presence (usually because an actor has just arrived in our location)

allowOtherActorToTake (obj)
Is another actor allowed to take obj from our inventory? By default we return nil to disallow it for all objects.

arouse (key)
Set the curiosityAroused flag to true for all topic entries with this convKey. This allows topics to be suggested when and only when the player character has some reason to be curious about them, even though they were actually available before.

arrivingTurn ( )
This method is executed when this actor has just followed the player character to a new location.

beforeAction ( )
Notification that an action is about to be carried out in our presence

beforeTravel (traveler, connector)
Notification that something else is about to travel. By default we defer to out actor state, if we have one, but we also give the actor object a chance to respond.

canCatchThrown (obj)
We'll assume that actors can catch anything thrown at them by default, but game code may wish to override this assumption.

canEndConversation (reason)
Is the actor willing for this conversation to be ended? We first check the current actor state (if any) and then the actor object. If either raises an object it should display a message saying what the objection is (and then return nil). By default we simply return true, allowing the conversation to end.

cannotTakeFromActorMsg (obj)
Return a message saying that the actor cannot take obj from our inventory.

convAgendaReady (other)
Is this actor ready to invoke a ConvAgendaItem? We're ready if we haven't conversed this term and we can speak to the other actor and we're not at a conversation node. This method is used by the isReady property of ConvAgendaItem (to save it having to make three separate calls to getActor).

dobjFor(AskAbout)
no description available

dobjFor(AskFor)
no description available

dobjFor(Attack)
no description available

dobjFor(AttackWith)
no description available

dobjFor(Follow)
no description available

dobjFor(Kiss)
no description available

dobjFor(QueryAbout)
no description available

dobjFor(SayTo)
no description available

dobjFor(TalkAbout)
no description available

dobjFor(TalkTo)
no description available

dobjFor(TellAbout)
no description available

endConversation (reason)
Terminate a conversation that's currently going on between this actor and the player character. The reason parameter is the reason for ending the conversation and can be one of endConvBye (the player character has just said goodbye), endConvTravel (the player character is leaving the location), endConvBoredom (this actor has become bored with waiting for the player character to say anything) or endConvActor (this actor wishes to terminate the conversation for some other reason of its own).

findBestResponse (prop, topic)
Find the best response to use for a conversational command directed to this actor. prop would normally be a property pointer for the property containing the appropriate list or lists of Topic Entries to test, and topic is the Topic object we're trying to match.

followDaemon ( )
Mechanism to allow this actor to follow the player char. We do this rather simplistically by checking whether the player char is still in our location and moving us to the player char's location if s/he is not on the assumption that if the player char can get there in one turn, so can we. On arriving in the player char's new location we announce that we've just followed the player char and then run the arrivingTurn method on our current actor state (if we have one).

followFuse ( )
This method is executed right at the end of a turn on which the player has issued a command to follow this actor, and carries out the travel to follow this actor if the actor has traveled.

getActor ( )
We supply a getActor method that returns self so that objects such as TopicEntries that may be located either directly or indirectly in us can get at their associated actor by simply calling getActor on their immediate location; at some point such a chain of calls to location.getActor will end here.

getBestMatch (prop, requestedList)
Find the best response to the topic produced by the player's command. prop is the xxxTopics list property we'll use to search for a matching TopicEntry. We first search the current ActorState for a match and then, only if we fail to find one, we search TopicEntries directly located in the actor. First priority, however, is given to TopicEntries whose convKeys match this actor's currentKeys (they match if the two lists have at least one element in common).

handleCommand (action)
Handle a command (e.g. BOB, JUMP) directed at this actor.

handleTopic (prop, topic, defaultProp, =, &, noResponseMsg)
Handle a conversational command where prop is a pointer to the property containing the appropriate list of TopicEntries to search (e.g. &askTopics), topic is the list of Topics to match, and defaultProp is pointer to the property to invoke if we can't find a match.

informedAbout (tag)
Determine whether this actor has been informed about tag. We return true if there is a corresponding non-nil entry in our informedNameTab

initiateTopic (top)
Respond to an InitiateTopic triggered on this actor with top as the matching object

iobjFor(GiveTo)
no description available

iobjFor(ShowTo)
no description available

iobjFor(ThrowTo)
no description available

makeActivated (key)
Set the activated flag to true for all topic entries with this convKey.

makeDeactivated (key)
Set the activated flag to nil for all topic entries with this convKey.

manageKeys ( )
Move pending keys to active keys and clear pending keys if need be. We call this out as a separate method to allow it to be directly called from elsewhere.

nilResponse ( )
Do nothing if we can't fine a suitable Hello or Bye Topic/

noteConversed ( )
Convenience method to note that conversation has occurred on this turn

notifyRemove (obj)
The notifyRemove() method is triggered when actionMoveInto() tries to move an object that's located within this actor. By default we don't allow it since it typically represents an attempt by the player character to take something from this actor's inventory.

remoteSpecialDesc (pov)
The specialDesc of this actor when it is viewed from a remote location. If we have a current ActorState we use its remoteSpecialDesc, otherwise we use the actorRemoteSpecialDesc on the actor. Either way the pov parameter is the point of view object from which this actor is being viewed (normally the player char). Note that this method is generally only relevant if the senseRegion module is used.

removeFromAllAgendas ([lst])
Remove an agenda Item both from this actor and from any associated DefaultAgendaTopics directly within this actor or in any of its ActorStates.

removeFromBothAgendas ([lst])
Remove an agenda Item both from this actor and from any associated DefaultAgendaTopics directly within this actor.

removeFromCurAgendas ([lst])
Remove an agenda item from myself and from any DefaultAgendaTopios directly in me or in my current ActorState.

removeFromPendingAgenda ([lst])
Remove one or more agenda items from our pending agenda

sayActorArriving (fromLoc)
Default message to display when the player character sees this actor arriving. We use a very plain-vanilla message here, since in practice game code will generally want to override this.

sayActorCatches (obj)
Display a message saying that this actor catches obj

sayActorDeparting (conn)
Method to display a message saying that this actor is departing via conn (a TravelConnector object, which may be a Room as well as a Door or other kind of connector). Note that the default behaviour of ActorState.sayDeparting is simply to call this method.

sayActorDropsCatch (obj)
Display a message saying that this actor failst to catch obj

sayActorFollowing (oldLoc, conn)
Display a message to say that we've just followed the player character to a new location from oldLoc. The library provides a default message but this can be overridded as desired.

sayActorFollowingMe (conn)
The message to display when another actor follows this one.

sayArriving (fromLoc)
The message to display when the player char sees this actor arriving after traveling from loc.

sayDeparting (conn)
Display a message describing this actor's departure via conn. This looks a bit circuitous in that this method calls the corresponding method on the current ActorState, which by default calls our own sayActorDeparting() method, which in turn calls sayDeparting on the connector; the idea is to allow customization at any point with the connector's sayDeparting() method simply providing a fallback to a colourless default. Note, however, that game code shouldn't normally override the actor's sayDeparting() method, but should instead intervene either on the ActorState or on the actor's sayActorDeparting() method.

sayFollowing (oldLoc, conn)
Display a message to say that we've just followed the player character to a new location from oldLoc.

sayGoodbye (reason, =, endConvBye)
Say goodbye to this actor (farewell from the player character). The optional reason parameter is the reason we're saying goodbye, which defaults to endConvBye (i.e. the player character saying goodbye)

sayHeadAfterActor (conn)
reset the lastTravelInfo now that it's been used and is no longer relevant.

sayHello ( )
Say hello to the actor (when the greetin is initiated by the player character)

setFollowMeFuse ( )
Set the fuse to enable travel later on the same turn if this actor travels in the meantime. This method is called when a FOLLOW command is issed with this actor as its direct object.

setInformed (tag)
Note that we've been informed of something, by adding it to our informedNameTab. Tag is an arbitrary single-quoted string value used to represent the information in question.

setState (stat)
Set our current ActorState to a new state (stat) or to no state at all (if the stat parameter is supplied as nil).

showSuggestions (explicit, =, true, tag, =, (, pendingKeys, =, =, ], suggestionKey, :, pendingKeys)
Show a list of topics the player character might want to discuss with this actor. The explicit flag is true if the player has explicitly requested the topic list via a TOPICS command. The tag parameter can be a single convKey tag or a list of convKey tags; if tag is nil or 'all' then we don't restrict the suggestions by tag, otherwise we restrict the suggestions to those that match the tag (or one of the tags in the list of tags).

specialDesc ( )
Our specialDesc (used to describe us in room listing). By default we use our ActorState's specialDesc if we have a current ActorState or else our actorSpecialDesc if our current ActorState is nil. But if there's a current FollowAgendaItem we let it handle the specialDesc instead.

startFollowing ( )
Game code can call this method to instruct this actor to start following the player char round the map

stopFollowing ( )
Game code can call this method to instruct this actor to stop following the player char round the map.

takeTurn ( )
The takeTurn() method is called on every Actor every turn to carry out a number of housekeeping functions relating to the conversation and agenda item systems.

travelVia (conn, announceArrival, =, true)
Make this actor travel via the connector conn and report its departure. If announceArrival is true (the default) we also announce the actor's arrival (if it's visible to the player char). To suppress the default arrival announcement altogether, supply the second optional parameter as nil. In some cases it may be easier to do this and supply your own custom arrival message after calling travelVia() than to juggle with the various sayArriving() methods. 