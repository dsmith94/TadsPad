{"name":"Tadspad","tagline":"Cross-platform IDE for Tads 3 development with the adv3lite library.","body":"\r\n<h3>TadsPad User's Guide</h3>\r\n<h4>by spaceflounder</h4>\r\n<p>Disclaimer: I take no reponsibility for any damage done by TadsPad\r\nto your project, computer or any other property. Use at your own risk.</p>\r\n<br>\r\n<h4>Contents</h4>\r\n<p><a href=\"#Introduction\">Introduction</a></p>\r\n<p><a href=\"#Start\">Quick Start</a></p>\r\n<p><a href=\"#Overview\">Layout Overview</a></p>\r\n<p><a href=\"#Features\">Advanced Features</a></p>\r\n<br><br>\r\n<a id=\"Introduction\"><h4>Introduction</h4></a>\r\n<p>Welcome to TadsPad, an open-source IDE designed for the development\r\nof TADS3/adv3Lite Interactive Fiction. If you're reading this, you're\r\nlikely eager to get to writing your own games. For the most part, if\r\nyou can use any modern word processor, you can probably use TadsPad to\r\nmake a TADS story with minimum duress.</p>\r\n\r\n<p>The Quick Start section is designed to get you into programming with\r\nTadsPad right away, and is probably no more than most users will need.</p>\r\n\r\n<p>Why build another IDE for TADS? First, while TADS Workbench is an\r\nexcellent piece of software, it is MS-Windows only. Furthermore, there were a number of \r\nfeatures I missed from other development packages, like code completion,\r\nspell checking, context help and editor themes. I also wanted tight integration to\r\nEric Eve's fantastic adv3Lite, along with built-in TADS object browsing.\r\nAnd anyway, I wanted to write games on my Linux laptop, so TadsPad was\r\nto be implented in cross-platform Python 2.7.</p>\r\n\r\n<p>What is not included in TadsPad? Most notably, Workbench users\r\nwill note the lack of the debugger. I have no plans at the present time\r\nto add a debugger to this software, as the complicated plumbing required\r\nto do so would be an enormous job, and the current *nix TADS \r\ninterpreters would need to be rewritten.</p>\r\n\r\n<p>Requirements:\r\n<br>Python 2.7\r\n<br>wxPython 2.8 or higher\r\n<br>TADS 3.1 or higher (compiler <i>and</i> interpreter)\r\n<br>adv3Lite\r\n<br>A decently fast computer</p>\r\n\r\n<p>Quick point about decently fast computers: TadsPad does some heavy\r\ncalculations in the background for the code completion subsystem. Nearly\r\nall processors in use can handle the load, but it's worth bearing in\r\nmind. That said, I wrote a whole game on a 12-year-old Pentium III with\r\nCrunchbang Linux, and TadsPad held up fine.</p>\r\n\r\n<p>wxPython is the required GUI toolkit. It is a mature and popular\r\ncross-platform widget kit, and has been used in other, similiar \r\napplications with success. In testing, however, I found that most Linux\r\nrepo's contained old versions of wxPython. TadsPad will try to use\r\nwhatever is installed, but some features will not work on anything under\r\nversion 3.0, like correct coloring on triple quotes or brace \r\nhighlighting. </p>\r\n\r\n<p>TadsPad requires that adv3Lite is correctly installed in your user's\r\nDocuments/TADS 3/extensions directory. If TadsPad cannot find adv3Lite,\r\nit will exit.</p>\r\n\r\n\r\n<br><br>\r\n<a id=\"Start\"><h4>Quick Start</h4></a>\r\n\r\n<p>Assuming that all dependancies are met, TadsPad will load and show\r\na Tip of the Day, like this:</p>\r\n<img src=\"img/tip.png\" />\r\n\r\n<p>Click \"Create New Project\" to begin a new story. The New Project\r\nwindow will open, looking like this:</p>\r\n<img src=\"img/newproject.png\" />\r\n\r\n<p>It may look a bit overwhelming, but creating a new project is \r\nactually very simple. The only required field on this window is the \r\nProject Name; everything else can be edited after the project is \r\ncreated, even the game title and description.</p>\r\n\r\n<p>Go ahead and enter a project name. Note that the project name is not\r\nthe same as the game title: the name is the literal filename the\r\nTADS compiler will generate when the story is built into a single\r\nTADS VM file. Hence, the project name should only contain alphanumeric\r\ncharacters, as punctuation marks or symbols will produce an invalid\r\nfilename.</p>\r\n\r\n<p>You can now fill the other fields as you like. Note the game title,\r\nauthor, email, html description and text description can all be changed\r\nby editing the versionInfo object contained in start.t, which will be\r\ngenerated after the project is created.</p>\r\n\r\n<p>Below the email field you'll see you have the ability to choose the\r\nlibrary you want to compile your project with. By default, the adv3Lite\r\nlibrary is selected. You can also choose the adv3Liter library, which\r\ncreates a streamlined world model suitable for simpler games (like those\r\ncontaining no actors or dialogue, for instance.)</p>\r\n\r\n<p>Still further below is the option to build your own custom library.\r\nBy default, all the standard adv3Lite files are included in the custom\r\nlibrary setup, but you can include or exclude any combination of\r\nfiles or extensions you like. TadsPad searches the extensions path for\r\nnew extensions on load, so if you've got a super cool new extension\r\nyou've just downloaded (or built yourself) TadsPad can incorporate it\r\nand it will be built into the code completion database.</p>\r\n\r\n<p>Caution: if you choose to build a custom library, not all \r\ncombinations of source files will produce a working game. It is\r\nrecommended that unless you know what you're doing, that you include\r\nall the default adv3Lite source files. For instance, the extension\r\nroomparts.t will NOT work without standard adv3Lite file extras.t.</p>\r\n\r\n<p>If this is your first new project, you may choose to just go with\r\nthe standard adv3Lite library, which is selected by default.</p>\r\n\r\n<p>On the right side of the window you'll note the game description\r\ntext boxes, one for html and one for straight Unicode text. It is\r\nrecommended that you write the html version first. While you're typing,\r\nTadsPad will fill the standard text box with the text from the html\r\nbox, save for whatever html tags and special tokens you may have used.</p>\r\n\r\n<p>For instance, if you have typed:</p>\r\n\r\n<code>\r\n\r\nThis is my new project &amp;mdash; made with TadsPad.\r\n\r\n</code>\r\n\r\n<br><br>within the html box, in the text box it will appear as:<br><br>\r\n\r\n<code>\r\n\r\nThis is my new project made with TadsPad.\r\n\r\n</code>\r\n\r\n<br><br>because the special html token &amp;mdash; is removed.<br><br>\r\n\r\n<p>For this User's Guide, I made a filled the entry fields like so:</p>\r\n\r\n<img src=\"img/newproject2.png\" />\r\n\r\n<p>With all of your name project fields set to your liking, go ahead and\r\nclick \"Ok\" to create your new project. TadsPad will now take a moment to\r\nscan your adv3Lite source files. This step is necessary as each library\r\nsetup can be different &mdash; for instance, if you chose to use \r\nadv3Liter, it will produce a different set of source files to scan as\r\nopposed to the default adv3Lite. Primarily, this is so TadsPad can build\r\nthe code completion database. While building library references, TadsPad\r\nwill display a window that looks like this:</p>\r\n\r\n<img src=\"img/building.png\" />\r\n\r\n<p>When the library references are built, TadsPad will finally appear \r\nonscreen:</p>\r\n\r\n<img src=\"img/gettingstarted.png\" />\r\n\r\n<p>TadsPad will automatically create a directory for your project in the\r\nDocuments/TADS 3 path. Presently, the project contains only a very\r\nsimple single code file (start.t) and the project file used for \r\ncompilation. As is, this project will compile successfully into an \r\nextremely simple game. You can play it by selecting Tools->Compile and\r\nDebug from the menu toolbar, or pressing the shortcut key F5.</p>\r\n\r\n<p>Let's demonstrate how code completion works in TadsPad. Type the\r\nfollowing code into the start.t file, on line 55 (at the end of the \r\nfile): </p>\r\n\r\n<code>\r\n\r\n<p>++ lamp: Thing ''</p>\r\n\r\n</code>\r\n\r\n<p>Note that if you copy and paste the code above instead of typing it,\r\nyou will not see the code completion engine work. As you type the\r\nkeyword &ldquo;Thing&rdquo; TadsPad will suggest TAction then\r\nThing as you type letter T then H. As you press the Enter key when\r\nyou are done typing, TadsPad will automatically add a semicolon below\r\nyour caret and indent, as it recognizes that you're creating a new\r\nobject.</p>\r\n\r\n<p>You might have noticed that there's nothing yet within the single\r\nquotes. There's not much use to a Thing object with no vocab \r\nproperty set, so let's put the following text between the quotes on line\r\n55:</p>\r\n\r\n<code>\r\n\r\n<p>brass lantern;old rusty;lamp</p>\r\n\r\n</code>\r\n\r\n<p>Were this a real game, we'd probably make this object much more\r\nsophisticated, but this suits the purposes of a tutorial. While entering\r\ntext between two single quotes or two double quotes, TadsPad is smart\r\nenough not to give suggestions from the code completion engine.</p>\r\n\r\n<p>Press Ctrl+S to Save All unsaved files in this project. You can also\r\nSave All by selecting File->Save All from the menu toolbar. Each time\r\nthe project is saved, TadsPad will re-scan for objects within your \r\nsource code. On the right side of the screen in the Object Browser in \r\nthe Project View control you should now see your new object, \r\n&ldquo;lamp&rdquo; along with the file it's in and the line number of the\r\nobject.</p>\r\n\r\n<img src=\"img/projectview.png\" />\r\n\r\n<p>Press F5 and your test game will compile and run. You'll now see\r\nthe brass lantern within your inventory while the game is running. </p>\r\n\r\n<p>Returning to TadsPad, let's take a moment to check out the Context\r\nHelp system. Using either the arrow keys or mouse cursor, position\r\nthe caret over the word &ldquo;Thing&rdquo; on line 55; then, press the\r\nF1 key. On the bottom of the screen, the Context Help control should\r\nnow look like this:</p>\r\n\r\n<img src=\"img/contexthelp.png\" />\r\n\r\n<p>The Context Help text field will fill with the adv3Lite documention\r\nfor the keyword the caret is on top of, in this case, Thing. For a more\r\ncomplicated example, move the caret to line 56, so we're now editing the\r\nlamp object.</p>\r\n\r\n<p>Type the letters i, s, and m while the caret is editing lamp. You'll\r\nsee that TadsPad suggests the property isMoveable. Go ahead and select\r\nisMoveable, and press F1. Now, the Context Help text reflects the\r\nhelp text for the isMoveable property of class Thing. Note that the\r\nhelp text is gathered from comments in adv3Lite's source code, not\r\nfrom the documentation text.</p>\r\n\r\n<p>You might now choose to delete line 56, containing the isMoveable\r\nproperty, as we're finished with Context Help for now.</p>\r\n\r\n<p>Of course, the Context Help is no substitute for an actual library\r\nreference, which most authors choose to have in the background while \r\nwriting TADS code. Press F2 or select Help->Adv3Lite Bookshelf to access\r\nthe complete adv3Lite documentation in your web browser. Note that most\r\noperating systems will not require that you have a web browser already opened\r\nbefore pressing F2.</p>\r\n\r\n<p>After your game becomes fairly large, it becomes cumbersome to have\r\nto navigate the complete story geography or re-type the commands necessary\r\nto reach a certain point in the game you'd like to debug. This is where\r\nTranscript View Window is useful.</p>\r\n\r\n<p>To demonstrate, press F5 to run your game again, and then type any\r\nsequence of commands you like. In this example, I entered: </p>\r\n\r\n<code>\r\n\r\n<p>jump</p>\r\n<p>yell</p>\r\n<p>examine me</p>\r\n<p>attack</p>\r\n<p>drop the lantern</p>\r\n<p>q</p>\r\n<p>y</p>\r\n\r\n</code>\r\n\r\n<p>The last two commands (q and y) exited the TADS interpreter. Having\r\nreturned to TadsPad, press F6 or select Tools->View Transcript from\r\nthe menu toolbar to open the Transcript View Window.</p>\r\n\r\n<img src=\"img/transcript.png\" />\r\n\r\n<p>A complete set of commands entered in the last session on your game\r\n(including commands that didn't work in-game) are displayed onscreen. If you\r\nwant to save a transcript for later, press the Save Transcript button\r\nto store those commands to file on disk. If you double-click one of the\r\ncommands, the game will run and automatically enter all commands up through\r\nthe one you've selected, bringing you to a certain point in the game. For\r\ninstance, if you double-click the command &ldquo;drop the lantern&rdquo;\r\nyou'll find the game runs and the in-game world now has the lantern on\r\nthe ground instead of in the player's inventory.</p>\r\n\r\n\r\n\r\n<br><br>\r\n<a id=\"Overview\"><h4>Layout Overview</h4></a>\r\n\r\n<img src=\"img/layout.png\" />\r\n<br><br>\r\n<p><b>The Object Browser</b></p>\r\n\r\n<p>On the right side of the screen on the standard TadsPad Window is\r\nthe object browser. Every time you save the project, TadsPad will\r\nrefresh the browser with all the objects in the project. If you'd like\r\nto go straight to a specfic object, double-click it in the object browser,\r\nand TadsPad will open the file with the object and display it in the\r\neditor.</p>\r\n\r\n<p><b>Project Files</b></p>\r\n\r\n<p>TadsPad maintains a complete list of the .t source files in your\r\nproject. To view any one of them, double-click the file and you'll see it\r\nloaded in the editor.</p>\r\n\r\n<p><b>Message Center</b></p>\r\n\r\n<p>The Message Center is TadsPad's primary way of communicating with you,\r\nthe author. If you use the Context Help (by putting the caret over a\r\nvalid adv3Lite keyword and pressing F1) the Message Center will automatically\r\nselect the Context Help tab and display the keyword help.</p>\r\n\r\n<p>You can manually switch between the Compile Output and the Context Help\r\nand any time, by selecting them with the tabs on the bottom of the screen.\r\nThe Compile Output is displayed automatically on game compile, to display\r\nmessages from the TADS compiler. If there are any build errors, you can\r\ndouble-click the error in the Compile Output and view the offending\r\nline of code in the editor.</p>\r\n\r\n<p><b>The Editor</b></p>\r\n\r\n<p>If you've ever used Notepad, or most any other text editor, the editor\r\ncomponent of TadsPad will seem very familiar. TadsPad harnesses the wxPython\r\npackged version of the venerable Scintilla, used also by TADS Workbench.\r\nAs such, TadsPad will automatically syntax highlight TADS code for the\r\nconvenience of the author.</p>\r\n\r\n<br><br>\r\n<a id=\"Features\"><h4>Advanced Features</h4></a>\r\n\r\n<p><b>Spell Checking</b></p>\r\n<p>If you happen to have an internet connection, TadsPad can use\r\nAfter the Deadline, a free spelling/grammer check web service, to scan\r\nyour game for spelling mistakes. TadsPad will automatically extract all\r\nthe strings in the opened tab in the editor and ship them off to AtD.</p>\r\n\r\n<p>To use the Spell Check, press F7, or select Tools->Spell Check from\r\nthe menu toolbar. If no errors remain, or AtD is down for some reason, no\r\nspell check window will appear. Otherwise, TadsPad will give you a choice\r\nof what you'd like to do with the given spelling error.</p>\r\n\r\n\r\n<p><b>Reconfigure Library</b></p>\r\n\r\n<p>In the event that you'd like to change what library sources your project\r\nuses, you can do that at any time by selecting Tools->Reconfigure Library\r\nfrom the menu toolbar.</p>\r\n\r\n<img src=\"img/reconfigure.png\" />\r\n\r\n<p>For instance, let's say you made a project with adv3Liter, and decided\r\nwhile working on the project that you really need the full adv3Lite. Open\r\nthe Reconfigure Library Window and select adv3Lite (which is the default.)\r\nClick Ok and TadsPad will rebuild the library references. Note that the\r\ncode completion database and the context help will rebuild as well.</p>\r\n\r\n\r\n<p><b>Text Settings</b></p>\r\n\r\n<img src=\"img/textsettings.png\" />\r\n\r\n<p>You can change the text size and color theme at any time by selecting\r\nEdit->Text Settings from the menu toolbar. To make the font larger, slide\r\nthe size control to the right, or to the left for smaller text. </p>\r\n\r\n<p>TadsPad will understand (most) standard XML Eclipse themes. TadsPad\r\ncomes with a few, but you can download hundreds more from the internet.\r\nTo change the theme, click Load Color Scheme on the Text Settings Window. A \r\nfile selection dialog box will appear, and you can choose a new\r\nscheme. </p>\r\n\r\n\r\n<p><b>Executable Paths</b></p>\r\n\r\n<p>TadsPad needs to know where TADS 3 is installed for the purpose of\r\ncompiling and running games. On *nix platforms, TadsPad will also need\r\nto know where to find a Terminal Emulator, like xterm. On first time\r\nload, TadsPad will make guesses as to where each of those pathes exist\r\non the local system. If TadsPad is incorrect &mdash; like, for example,\r\nif you've got TADS installed in some really weird place &mdash; you can \r\nchange the path and file where TadsPad will look.</p>\r\n\r\n<img src=\"img/executablepaths.png\" />\r\n\r\n<p>Select Edit->Executable Path from the menu toolbar. From here, you can\r\nchange the TADS compiler, the TADS interpreter, or the Terminal Emulator.\r\nNote that on Windows systems the Terminal Emulator path is not used.</p>\r\n\r\n<p>Caution: the Terminal Emulator you choose must use xterm style command\r\nexecutable switches, lest TadsPad crash whenever you try to compile and run\r\nand game.</p>\r\n\r\n<p>Furthermore, on the *nix platforms, you MUST use frobtads (executable\r\nname is frob, which is the default) as QTads will not import transcripts.</p>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}